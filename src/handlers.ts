import { Context, InputFile, BotError, GrammyError, HttpError } from "grammy";
import { isValidURL } from "./utils/URLcheck";
import { uploader } from "./utils/uploadFromURL";

// TODO: add I18N
export const startHandler = async (ctx: Context) => {
  const name: string = ctx.from?.first_name || "–ê–Ω–æ–Ω–∏–º";

  await ctx.reply(
    `*üñê –ü—Ä–∏–≤–µ—Ç, ${name}!* \n\n` +
      "–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Å URL.\n" +
      "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ \`/upload <URL>\` –∏ —è –∑–∞–≥—Ä—É–∂—É —Ñ–∞–π–ª —Å –Ω–µ–≥–æ.",
    {
      parse_mode: "Markdown",
    },
  );
};

export const urlUploadHandler = async (ctx: Context) => {
  const url = ctx.match as string;

  if (!url) {
    ctx.reply("URL –Ω–µ –±—ã–ª –≤–≤–µ–¥–µ–Ω");
  } else if (!isValidURL(url)) {
    ctx.reply(`${url} –Ω–µ —è–ª–≤—è–ª–µ—Ç—Å—è URL`);
  } else {
    try {
      const fileName = await uploader(url);
      ctx.replyWithDocument(new InputFile(fileName));
    } catch (error) {
      ctx.reply("‚ö† —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
      console.error(error);
    }
  }
};

export const catchHandler = (q: BotError) => {
  const { ctx, error } = q;

  console.error(`Error while handling update ${ctx.update.update_id}:`);

  if (error instanceof GrammyError) {
    console.error("Error in request:", error.description);
  } else if (error instanceof HttpError) {
    console.error("Could not contact Telegram:", error);
  } else {
    console.error("Unknown error:", error);
  }
};
